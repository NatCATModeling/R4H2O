reprex:::reprex_addin()
getwd()
demo()
demo(graphics)
demo(plotmath)
demo(image)
# Produce a plot of the function `y=-x^2-2x+3`$ in the R console.
x <- -10:10
y <- x^2 - 2 * x + 3
plot(x, y, type = "l")
y
y <- -x^2 - 2 * x + 3
plot(x, y, type = "l")
y <- -x^2 - 2 * x + 3
plot(x, y, type = "l")
y
# Produce a plot of the function `y=-x^2-2x+3`$ in the R console.
x <- -5:5
y <- -x^2 - 2 * x + 3
plot(x, y, type = "l")
y
# Produce a plot of the function `y=-x^2-2x+3`$ in the R console.
x <- -5:3
y <- -x^2 - 2 * x + 3
plot(x, y, type = "l")
a^2 (-b + sqrt(b^2 - 4 * a * c))
a <- -1
b <- -2
c <- 3
a^2 (-b + sqrt(b^2 - 4 * a * c))
a^2 (-b + sqr(b^2 - 4 * a * c))
b^2 - 4 * a * c
sqrt(b^2 - 4 * a * c)
(-b + sqrt(b^2 - 4 * a * c)) / (2 * a)
abline(h = 0, col = "grey")
abline(v = 0, col = "grey")
x1 <- (-b + sqrt(b^2 - 4 * a * c)) / (2 * a)
x2 <- (-b - sqrt(b^2 - 4 * a * c)) / (2 * a)
points(c(x1, x2), c(0, 0))
points(c(x1, x2), c(0, 0), col = "red")
points(c(x1, x2), c(0, 0), col = "red", pch = 22)
points(c(x1, x2), c(0, 0), col = "red", pch = 21)
points(c(x1, x2), c(0, 0), col = "red", pch = 19)
# Produce a plot of the function `y=-x^2-2x+3`$ in the R console.
x <- -5:3
y <- -x^2 - 2 * x + 3
plot(x, y, type = "l")
a <- -1
b <- -2
c <- 3
x1 <- (-b + sqrt(b^2 - 4 * a * c)) / (2 * a)
x2 <- (-b - sqrt(b^2 - 4 * a * c)) / (2 * a)
abline(h = 0, col = "grey")
abline(v = 0, col = "grey")
points(c(x1, x2), c(0, 0), col = "red", pch = 19)
# Produce a plot of the function `y=-x^2-2x+3`$ in the R console.
x <- seq(-5, 3, .1)
y <- -x^2 - 2 * x + 3
plot(x, y, type = "l")
a <- -1
b <- -2
c <- 3
x1 <- (-b + sqrt(b^2 - 4 * a * c)) / (2 * a)
x2 <- (-b - sqrt(b^2 - 4 * a * c)) / (2 * a)
abline(h = 0, col = "grey")
abline(v = 0, col = "grey")
points(c(x1, x2), c(0, 0), col = "red", pch = 19)
## Parabola
png("manuscript/resources/parabola.png")
x <- seq(-5, 3, .1)
y <- -x^2 - 2 * x + 3
plot(x, y, type = "l")
a <- -1
b <- -2
c <- 3
x1 <- (-b + sqrt(b^2 - 4 * a * c)) / (2 * a)
x2 <- (-b - sqrt(b^2 - 4 * a * c)) / (2 * a)
abline(h = 0, col = "grey")
abline(v = 0, col = "grey")
points(c(x1, x2), c(0, 0), col = "red", pch = 19)
dev.off()
help("seq")
## Parabola
png("manuscript/resources/session2/parabola.png")
x <- seq(-5, 3, .1)
y <- -x^2 - 2 * x + 3
plot(x, y, type = "l")
a <- -1
b <- -2
c <- 3
x1 <- (-b + sqrt(b^2 - 4 * a * c)) / (2 * a)
x2 <- (-b - sqrt(b^2 - 4 * a * c)) / (2 * a)
abline(h = 0, col = "grey")
abline(v = 0, col = "grey")
points(c(x1, x2), c(0, 0), col = "red", pch = 19)
dev.off()
## Mean value
chlorine <- c(1.64, 0.93, 0.87, 0.27, 0.16, 0.22)
mean(chlorine)
help("mean")
help(seq)
a <- 1:2
a == 1
## Cae Study 1: Water Quality Regulations
## Load data
turbidity <- read.csv("session2/turbidity_laanecoorie.csv")
turbidity[turbidity$Zone == "Laanecoorie" & turbidity$Result > 1, ]
b <- max(turbidity$Result) / 0.1
hist(turbidity$Result, breaks = b)
help(boxplot)
set.seed(1)
X <- rnorm(200)
boxplot(X, yaxt = "n")
## compute the required quantiles
qntl <- quantile(X, probs = c(0.85, 0.90))
## add them as a rgu plot to the left hand side
rug(qntl, side = 2, col = "blue", lwd = 2)
## add the box and axes
axis(2)
box()
set.seed(1)
X <- rnorm(200)
boxplot(X, yaxt = "n")
## compute the required quantiles
qntl <- quantile(X, probs = c(0.85, 0.90))
abline(h = 0.95)
set.seed(1)
X <- rnorm(200) * 10
boxplot(X)
abline(h = 0.95)
## compute the required quantiles
qntl <-
abline(h = quantile(X, probs = c(0.85, 0.90)))
turbidity$Date_Sampled
## Convert data
str(turbidity)
levels(turbidity$Sample_Point)[7]
turbidity$Date_Sampled <- as.Date(turbidity$Date_Sampled)
## Explore data
table(turbidity$Zone)
unique(turbidity$Sample_Point)
max(turbidity$Result)
range(turbidity$Result)
summary(turbidity$Result)
# Add data
turbidity$Comply <- turbidity$Result <= 5
turbidity$Comply
sum(turbidity$Comply) / nrow(turbidity)
## Subset data
turbidity$Result[1:10]
turbidity[1:10, 4:5]
names(turbidity)[4:5]
turbidity[1:10, c("Zone", "Result")]
ramming langug
turbidity[turbidity$Zone == "Bealiba", ]
turbidity$Result[nrow(turbidity)]
nrow(turbidity[turbidity$Result >= .5, ])
laanecoorie <- turbidity[turbidity$Zone == "Laanecoorie", ]
laanecoorie <- subset(turbidity, Zone == "Laanecoorie")
summary(laanecoorie$Result)
# Anlyse data
quantile(turbidity$Result, probs = 0.95, type = 6)
sapply(1:9, function(m) quantile(turbidity$Result, 0.95, type = m))
z <- "Bealiba"
sapply(unique(turbidity$Zone), function(z) {
quantile(turbidity$Result[turbidity$Zone == z], 0.95, type = 6)
})
## Visualise data
b <- max(turbidity$Result) /.1
hist(turbidity$Result, breaks = b)
boxplot(Result ~ Zone, data = turbidity,
main = "Turbidity Results Laanecoorie water system",
ylab = "Turbidity (NTU)")
abline(quantile(turbidity$Result, 0.95))
abline(h = quantile(turbidity$Result, 0.95), col = red)
abline(h = quantile(turbidity$Result, 0.95), col = "red")
help(summary)
summary(attenu, digits = 4)
summar(turbidity)
summary(turbidity)
summary(turbidity$Result)
aggregate(turbidity$Result, list(turbidity$Zone), mean)
aggregate(turbidity$Result, list(turbidity$Zone, turbidity$Sample_No), mean)
aggregate(turbidity$Result, list(turbidity$Zone, turbidity$Sample_Point), mean)
str(aggregate(turbidity$Result, list(turbidity$Zone, turbidity$Sample_Point), mean))
str(aggregate(turbidity$Result, list(turbidity$Zone), boxplot))
help("aggregate")
{format: r, line-numbers: false}
```
aggregate(turbidity$Result, list(turbidity$Zone), quantile(0.95, method = 6)
aggregate(turbidity$Result, list(turbidity$Zone), quantile)
aggregate(turbidity$Result, list(turbidity$Zone), quantile)
aggregate(turbidity$Result, list(turbidity$Zone), quantile, 0.95)
aggregate(turbidity$Result, list(turbidity$Zone), quantile, 0.95, method = 6)
aggregate(turbidity$Result, list(turbidity$Zone), quantile, 0.95, method = 6)
aggregate(turbidity$Result, list(turbidity$Zone), quantile, 0.95, method = 1)
aggregate(state.x77,
list(Region = state.region,
Cold = state.x77[,"Frost"] > 130),
mean)
state.x77
agregate(turbidity, list(Zone))
aggregate(turbidity, list(Zone))
aggregate(turbidity, list(Zone), mean)
aggregate(turbidity, list(Zome = Zone), mean)
aggregate(turbidity, list(Zome = turbidity$Zone), mean)
aggregate(turbidity, list(Zone = turbidity$Zone), mean)
turbidity
library(tidyverse)
turbidity %>%
select(-Comply)
sleect(turbidity, -Comply) %>% write_csv("session2/turbidity_laanecoorie.csv")
select(turbidity, -Comply) %>% write_csv("session2/turbidity_laanecoorie.csv")
aggregate(turbidity$Result, list(turbidity$Zone), quantile, 0.95, method = 6)
aggregate(turbidity$Result, list(Zone = turbidity$Zone), quantile, 0.95, method = 6)
aggregate(turbidity$Result, list(turbidity$Zone), max)
a <- aggregate(turbidity$Result, list(turbidity$Zone), max)
barplot(a$Group.1, a$x)
barplot(a$x)
barplot(a$x, names.arg = a$Group.1)
